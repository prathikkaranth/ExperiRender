#version 460

#extension GL_GOOGLE_include_directive : require
#include "input_structures.glsl"

layout (local_size_x = 16, local_size_y = 16) in;

layout(r8,set = 0, binding = 5) uniform image2D image;

layout(set = 0, binding = 1) uniform sampler2D depthMap;
layout(set = 0, binding = 2) uniform sampler2D GbufferPosition;
layout(set = 0, binding = 3) uniform sampler2D GbufferNormal;
layout(set = 0, binding = 4) uniform sampler2D texNoise;

layout(set = 0, binding = 0) uniform SSAOData{
    vec3 samples[64];
    int kernelSize;
    float radius;
    float bias;
} ssaoData;

// tile noise texture over screen based on screen dimensions divided by noise size
const vec2 noiseScale = vec2(1280.0/4.0, 720.0/4.0); 

// SSAO calculation
void mainImage(out vec4 fragColor, in vec2 fragCoord ) {

    // get input for SSAO algorithm
    vec3 fragPos = texture(GbufferPosition, fragCoord).xyz;
    vec3 normal = normalize(texture(GbufferNormal, fragCoord).rgb);
    vec3 randomVec = normalize(texture(texNoise, fragCoord * noiseScale).xyz);

    // create TBN change-of-basis matrix: from tangent-space to view-space
    vec3 tangent = normalize(randomVec - normal * dot(randomVec, normal));
    vec3 bitangent = cross(normal, tangent);
    mat3 TBN = mat3(tangent, bitangent, normal);

    // iterate over the sample kernel and calculate occlusion factor
    float occlusion = 0.0;
    for(int i = 0; i < ssaoData.kernelSize; ++i) {

        // get sample position
        vec3 samplePos = TBN * ssaoData.samples[i]; // from tangent to view-space
        samplePos = fragPos + samplePos * ssaoData.radius; 

        // project sample position (to sample texture) (to get position on screen/texture)
        vec4 offset = vec4(samplePos, 1.0);
        offset = sceneData.proj * offset; // from view to clip-space
        offset.xyz /= offset.w; // perspective divide
        offset.xyz = offset.xyz * 0.5 + 0.5; // transform to range 0.0 - 1.0

        // get sample depth
        float sampleDepth = texture(GbufferPosition, offset.xy).z; // get depth value of kernel sample

        // range check & accumulate
        float rangeCheck = smoothstep(0.0, 1.0, ssaoData.radius / abs(fragPos.z - sampleDepth));
        occlusion += (sampleDepth >= samplePos.z + ssaoData.bias ? 1.0 : 0.0) * rangeCheck; 
    }

    occlusion = 1.0 - (occlusion / float(ssaoData.kernelSize));
    fragColor = vec4(vec3(occlusion), 1.0);
}

void main() 
{
    ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

	ivec2 size = imageSize(image);

    if(texelCoord.x < size.x && texelCoord.y < size.y)
    {
        vec4 fragColor;
        vec2 uv = vec2(texelCoord) / vec2(size);
        mainImage(fragColor, uv);
        imageStore(image, texelCoord, fragColor);
    }
}