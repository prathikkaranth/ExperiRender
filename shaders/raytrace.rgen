#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require

#include "raycommon.glsl"
#include "random.glsl"
#include "input_structures.glsl"

layout(location = 0) rayPayloadEXT hitPayload prd;

layout(binding = 0, set = 1) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 1, rgba32f) uniform image2D image;

layout(set = 4, binding = 2) uniform sampler2D texSkybox;

layout(push_constant) uniform _PushConstantRay { PushConstantRay pcRay; };

vec3 tracePath() {
    prd.color = vec3(0.0, 0.0, 0.0);

    // Compute Camera ray
    const vec2 sample_coord = vec2(gl_LaunchIDEXT.xy) + vec2(rand1d(prd.seed), rand1d(prd.seed));
    const vec2 inUV = sample_coord / vec2(gl_LaunchSizeEXT.xy);
    const vec2 d = inUV * 2.0 - 1.0;

    prd.next_origin = (inverse(sceneData.view) * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
    const vec4 target = (inverse(sceneData.proj) * vec4(d.x, d.y, 1.0, 1.0));
    prd.next_direction = (inverse(sceneData.view) * vec4(normalize(target.xyz), 0.0)).xyz;
    prd.strength = vec3(1.0f);
    prd.isHit = true;

    const uint RAY_FLAGS = gl_RayFlagsOpaqueEXT;
    const uint CULL_MASK = 0xFF;
    const uint SBT_RECORD_OFFSET = 0;
    const uint SBT_RECORD_STRIDE = 0;
    const uint MISS_INDEX = 0;
    const float TMIN = 0.1;
    const float TMAX = 10000.0;
    const int PAYLOAD = 0;

    int depth = 0;
    vec3 last_direction = prd.next_direction; // Track the last direction

    while (prd.next_direction != vec3(0.0, 0.0, 0.0) && depth < pcRay.depth) {
        const vec3 origin = prd.next_origin;
        const vec3 direction = prd.next_direction;

        // we're using this a proxy for "no intersection"
        prd.next_direction = vec3(0.0, 0.0, 0.0);

        traceRayEXT(topLevelAS, 
                    RAY_FLAGS, 
                    CULL_MASK, 
                    SBT_RECORD_OFFSET, 
                    SBT_RECORD_STRIDE, 
                    MISS_INDEX, 
                    origin,
                    TMIN, 
                    direction,
                    TMAX, 
                    PAYLOAD);

        depth++;
    }
    if (depth == 1 && !prd.isHit)
    {
        // Sky color, does not participate in lighting
        // Use the camera ray direction instead of gl_WorldRayDirectionEXT
        vec3 dir = normalize(last_direction);  // This is the direction of the ray that missed

        // Convert direction to spherical coordinates
        float u = 0.5 + atan(dir.z, dir.x) / (2.0 * 3.14159265359);
        float v = 0.5 - asin(dir.y) / 3.14159265359;

        // Flip the V coordinate to match the rasterizer's flipped texture
        v = 1.0 - v;

        // Sample the HDRI texture
        vec4 texColor = texture(texSkybox, vec2(u, v));

        // Apply only HDR color to the skybox
        vec3 hdrColor = texColor.rgb * texColor.a;

        return hdrColor;
    }
    const vec3 radiance = prd.color.rgb;
    return radiance;
}

void main() 
{
    prd.seed = gl_LaunchIDEXT.x * gl_LaunchSizeEXT.x + gl_LaunchIDEXT.y + (pcRay.seed * 0x9e3779b1);
    
    // Initialize prd values
    prd.color = vec3(0.0);
    prd.strength = vec3(1.0);
    prd.isHit = true;
    
    const vec3 radiance = tracePath();

    const ivec2 storePos = ivec2(gl_LaunchIDEXT.xy);

    const vec4 old_radiance = imageLoad(image, storePos);
    const float k = 1.0f / (float(pcRay.samples_done) + 1.0f);
    const vec4 new_radiance = old_radiance * (1.0f - k) + vec4(radiance, 1.0f) * k;
    imageStore(image, storePos, new_radiance);
}
