name: Windows CMake Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-windows:
    runs-on: windows-2022

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v2
      with:
        msbuild-architecture: x64

    - name: Manual Vulkan SDK Installation with Full Logging
      run: |
        $VulkanVersion = "1.3.283.0"
        $VulkanUrl = "https://sdk.lunarg.com/sdk/download/$VulkanVersion/windows/VulkanSDK-$VulkanVersion-Installer.exe"
        $InstallerPath = "$env:TEMP\VulkanSDK-Installer.exe"
        
        Write-Host "=== Starting Vulkan SDK Installation Process ==="
        Write-Host "Version: $VulkanVersion"
        Write-Host "URL: $VulkanUrl"
        Write-Host "Installer Path: $InstallerPath"
        Write-Host ""
        
        # Check initial system state
        Write-Host "=== Pre-installation System Check ==="
        Write-Host "Current user: $env:USERNAME"
        Write-Host "Available disk space on C:\"
        Get-WmiObject -Class Win32_LogicalDisk -Filter "DeviceID='C:'" | Select-Object Size,FreeSpace
        Write-Host ""
        
        # Download with detailed progress
        Write-Host "=== Downloading Vulkan SDK ==="
        try {
          $ProgressPreference = 'SilentlyContinue'  # Disable progress bar for cleaner output
          Invoke-WebRequest -Uri $VulkanUrl -OutFile $InstallerPath -TimeoutSec 300 -Verbose
          Write-Host "Download completed successfully"
          
          # Check downloaded file
          $fileInfo = Get-Item $InstallerPath
          Write-Host "Downloaded file size: $($fileInfo.Length) bytes"
          Write-Host "Downloaded file path: $($fileInfo.FullName)"
        } catch {
          Write-Error "Download failed: $_"
          exit 1
        }
        Write-Host ""
        
        # Try different installation approaches
        Write-Host "=== Installation Attempt 1: Standard Silent Install ==="
        try {
          Write-Host "Running: $InstallerPath /S"
          $process1 = Start-Process -FilePath $InstallerPath -ArgumentList "/S" -Wait -PassThru -NoNewWindow
          Write-Host "Process exit code: $($process1.ExitCode)"
          
          if ($process1.ExitCode -eq 0) {
            Write-Host "Standard silent install succeeded"
          } else {
            Write-Host "Standard silent install failed, trying alternative approaches..."
            
            Write-Host "=== Installation Attempt 2: NSIS Silent Install ==="
            $process2 = Start-Process -FilePath $InstallerPath -ArgumentList "/SILENT" -Wait -PassThru -NoNewWindow
            Write-Host "NSIS silent install exit code: $($process2.ExitCode)"
            
            if ($process2.ExitCode -ne 0) {
              Write-Host "=== Installation Attempt 3: Administrative Install ==="
              $process3 = Start-Process -FilePath $InstallerPath -ArgumentList "/S" -Verb RunAs -Wait -PassThru -NoNewWindow
              Write-Host "Administrative install exit code: $($process3.ExitCode)"
            }
          }
        } catch {
          Write-Error "Installation process failed: $_"
        }
        Write-Host ""
        
        # Comprehensive post-installation check
        Write-Host "=== Post-installation System Scan ==="
        
        # Check common Vulkan SDK locations
        $CommonPaths = @(
          "C:\VulkanSDK\$VulkanVersion",
          "C:\VulkanSDK",
          "${env:ProgramFiles}\VulkanSDK\$VulkanVersion",
          "${env:ProgramFiles}\VulkanSDK",
          "${env:ProgramFiles(x86)}\VulkanSDK\$VulkanVersion",
          "${env:ProgramFiles(x86)}\VulkanSDK"
        )
        
        $FoundPath = $null
        foreach ($path in $CommonPaths) {
          Write-Host "Checking: $path"
          if (Test-Path $path) {
            Write-Host "  - Directory exists"
            $contents = Get-ChildItem $path -ErrorAction SilentlyContinue
            Write-Host "  - Contains $($contents.Count) items"
            
            # Look for glslc.exe specifically
            $glslcPath = Join-Path $path "Bin\glslc.exe"
            if (Test-Path $glslcPath) {
              Write-Host "  - ✓ Found glslc.exe at $glslcPath"
              $FoundPath = $path
              break
            } else {
              Write-Host "  - ✗ glslc.exe not found in Bin subdirectory"
              # List contents to see what's actually there
              Write-Host "  - Directory contents:"
              Get-ChildItem $path -Recurse -Filter "*.exe" | ForEach-Object { Write-Host "    $($_.FullName)" }
            }
          } else {
            Write-Host "  - Directory does not exist"
          }
        }
        
        # If not found in common locations, do a comprehensive search
        if (-not $FoundPath) {
          Write-Host "=== Comprehensive Search for Vulkan SDK ==="
          Write-Host "Searching entire C: drive for VulkanSDK directories..."
          
          try {
            Get-ChildItem -Path "C:\" -Directory -Recurse -Filter "*Vulkan*" -ErrorAction SilentlyContinue | ForEach-Object {
              Write-Host "Found Vulkan-related directory: $($_.FullName)"
              
              # Look for glslc.exe in this directory
              Get-ChildItem $_.FullName -Recurse -Filter "glslc.exe" -ErrorAction SilentlyContinue | ForEach-Object {
                Write-Host "  - Found glslc.exe at: $($_.FullName)"
                $FoundPath = $_.Directory.Parent.FullName
              }
            }
          } catch {
            Write-Host "Comprehensive search failed: $_"
          }
        }
        
        # Final verification and environment setup
        if ($FoundPath) {
          Write-Host "=== SUCCESS: Vulkan SDK Found ==="
          Write-Host "Vulkan SDK Path: $FoundPath"
          
          # Set environment variables
          echo "VULKAN_SDK=$FoundPath" >> $env:GITHUB_ENV
          echo "$FoundPath\Bin" >> $env:GITHUB_PATH
          
          # Test glslc
          $glslcExe = Join-Path $FoundPath "Bin\glslc.exe"
          Write-Host "Testing glslc:"
          & $glslcExe --version
          
          Write-Host "=== Vulkan SDK Installation Complete ==="
        } else {
          Write-Host "=== FAILURE: Vulkan SDK Not Found ==="
          Write-Host "The installation may have failed or installed to an unexpected location."
          Write-Host ""
          Write-Host "Final system state:"
          Write-Host "Temp directory contents:"
          Get-ChildItem $env:TEMP -Filter "*Vulkan*" | ForEach-Object { Write-Host "  $($_.FullName)" }
          
          exit 1
        }
      shell: powershell

    - name: Create build directory and run CMake
      run: |
        mkdir build
        cd build
        cmake .. -G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release
        cmake --build . --config Release --parallel
      shell: cmd

    - name: List build directory contents
      run: |
        dir build\Release /s
      shell: cmd

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifact-windows
        path: |
          build/Release/
          build/shaders/
  
  test-windows:
    needs: build-windows
    runs-on: windows-2022

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Vulkan SDK
      run: |
        $VulkanVersion = "1.3.283.0"
        $VulkanUrl = "https://sdk.lunarg.com/sdk/download/$VulkanVersion/windows/VulkanSDK-$VulkanVersion-Installer.exe"
        $InstallerPath = "$env:TEMP\VulkanSDK-Installer.exe"
        
        Write-Host "Downloading Vulkan SDK..."
        Invoke-WebRequest -Uri $VulkanUrl -OutFile $InstallerPath -TimeoutSec 300
        
        Write-Host "Installing Vulkan SDK silently..."
        $process = Start-Process -FilePath $InstallerPath -ArgumentList @("/S") -PassThru -NoNewWindow
        $timeout = 600  # 10 minutes timeout
        if (-not $process.WaitForExit($timeout * 1000)) {
          $process.Kill()
          Write-Error "Vulkan SDK installation timed out"
          exit 1
        }
        
        # Set environment variables
        $VulkanPath = "C:\VulkanSDK\$VulkanVersion"
        echo "$VulkanPath\Bin" >> $env:GITHUB_PATH
      shell: powershell

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifact-windows
        path: ./

    - name: Run RendererTests
      run: |
        if exist Release\RendererTests.exe (
          Release\RendererTests.exe
        ) else (
          echo "RendererTests.exe not found"
          dir Release\ /b
          exit 1
        )
      shell: cmd